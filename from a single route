import prisma from "../DB/db.config.js";
import 'dotenv/config';
import jwt from 'jsonwebtoken';
import transporter from "../utils/transporter.js";
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export const verifyPatientEmail = async (req, res, next) => {
    const { email } = req.body;
    try {
        if (!email) {
            return res.status(400).json({ msg: 'Email is required' });
        }

        const isEmail = await prisma.patient.findUnique({ where: { email } });
        if (isEmail) {
            return res.status(400).json({ msg: 'Email is already present' });
        }

        const otpNumber = Math.floor(100000 + Math.random() * 900000).toString();
        const otpToken = jwt.sign({ otpNumber }, process.env.SECRET_KEY, { expiresIn: '2m' });

        // Save OTP token in DB
        await prisma.patient.create({ data: { email, otp: otpToken } });

        const mailOptions = {
            from: process.env.ADMIN_EMAIL,
            to: email,
            subject: 'Your One-Time Password (OTP) for Verification',
            html: `
                <p>Hello</p>
                <p>Thank you for signing up. Please use the following OTP to verify your email address. This OTP is valid for 2 minutes.</p>
                <h3>${otpNumber}</h3>
                <p>If you did not request this, please contact our support team immediately at support@example.com.</p>
                <p><a href="https://phoenix-sage.vercel.app/">Visit Our website</a></p>
                <p>Follow us on Social Media:<br/>
                <img src="cid:insta" alt="insta icon" style="width: 30px; height: 30px;" />
                <img src="cid:fb" alt="fb icon" style="width:30px; height:30px" />
                <img src="cid:yt" alt="yt icon" style="width:30px; height:30px" />
                </p>
                <p>Best regards,<br>Kanika Jindal<br>Founder<br>example@gmail.com</p>
            `,
            attachments: [
                {
                    filename: 'insta_logo.png',
                    path: path.join(__dirname, 'attachements', 'insta_logo.png'),
                    cid: 'insta'
                },
                {
                    filename: 'fb_logo.png',
                    path: path.join(__dirname, 'attachements', 'fb_logo.png'),
                    cid: 'fb'
                },
                {
                    filename: 'yt_logo.png',
                    path: path.join(__dirname, 'attachements', 'yt_logo.jpeg'),
                    cid: 'yt'
                }
            ]
        };


        transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
                prisma.patient.delete({ where: { email } }).catch(() => { }); // Clean up even if delete fails
                reject(error);
            } else {
                resolve(info);
            }
        });

        req.email = email;
        return next()

    } catch (error) {
        if (!res.headersSent) {
            return res.status(500).json({ msg: error.message });
        }
    }
};


export const verifyPatientOTP = async (req, res, next) => {
    const email = req.email;
    console.log('Verifying OTP for email:', email);
    try {
        const { otp } = req.body;

        if (!otp) {
            return res.status(400).json({ msg: 'OTP is required' });
        }

        const retrieveOtp = await prisma.patient.findUnique({ where: { email } });
        if (!retrieveOtp) {
            return res.status(404).json({ msg: 'OTP is invalid or expired' });
        }

        const realOtp = retrieveOtp.otp;
        const payload = jwt.verify(realOtp, process.env.SECRET_KEY);

        if (payload.otpNumber === otp) {
            await prisma.patient.update({ where: { email }, data: { otp: null } });
            // req.otpVerified = true; 
            return next()
        } else {
            return res.status(400).json({ msg: 'OTP is invalid or expired' });
        }
    } catch (error) {
        await prisma.patient.delete({ where: { email } }).catch(() => { }); // Clean up even if delete fails
        if (!res.headersSent) {
            return res.status(400).json({ msg: 'OTP is invalid or expired' });
        }
    }
};
